import { formatters } from './api';

/**
 * Data Export and Offline Support Utilities
 * Provides functionality to export dashboard data and support offline usage
 */

/**
 * Export data to CSV format
 * @param {Array} data - Data to export
 * @param {string} filename - Name of the file
 * @param {Array} columns - Column definitions
 */
export const exportToCSV = (data, filename = 'mgnrega-data', columns = null) => {
  try {
    if (!data || data.length === 0) {
      throw new Error('No data to export');
    }

    // Default columns for MGNREGA data
    const defaultColumns = [
      { key: 'district', label: 'District' },
      { key: 'month', label: 'Month' },
      { key: 'year', label: 'Year' },
      { key: 'person_days', label: 'Person Days' },
      { key: 'households', label: 'Households' },
      { key: 'funds_spent', label: 'Funds Spent (₹)' },
      { key: 'scheme_name', label: 'Scheme' },
      { key: 'block_name', label: 'Block' },
      { key: 'panchayat_name', label: 'Panchayat' }
    ];

    const exportColumns = columns || defaultColumns;

    // Create CSV headers
    const headers = exportColumns.map(col => col.label).join(',');

    // Create CSV rows
    const rows = data.map(row => {
      return exportColumns.map(col => {
        let value = row[col.key] || '';

        // Format numbers for better readability
        if (typeof value === 'number') {
          if (col.key === 'funds_spent') {
            value = formatters.formatNumber(value);
          } else {
            value = value.toLocaleString('en-IN');
          }
        }

        // Escape CSV values that contain commas or quotes
        if (typeof value === 'string' && (value.includes(',') || value.includes('"'))) {
          value = `"${value.replace(/"/g, '""')}"`;
        }

        return value;
      }).join(',');
    });

    // Combine headers and rows
    const csvContent = [headers, ...rows].join('\n');

    // Create and trigger download
    const blob = new Blob(['\ufeff' + csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');

    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', `${filename}-${new Date().toISOString().split('T')[0]}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      console.log(`✅ Exported ${data.length} records to CSV`);
      return { success: true, recordCount: data.length };
    } else {
      throw new Error('CSV download not supported in this browser');
    }

  } catch (error) {
    console.error('❌ CSV export failed:', error);
    return { success: false, error: error.message };
  }
};

/**
 * Export metrics summary to PDF-ready format
 * @param {Object} metrics - Metrics data
 * @param {string} districtName - District name
 * @returns {Object} PDF-ready data
 */
export const exportMetricsSummary = (metrics, districtName) => {
  const timestamp = new Date().toISOString();
  const formattedDate = formatters.formatDate(new Date());

  return {
    title: `MGNREGA ${districtName} - Performance Summary`,
    generatedOn: formattedDate,
    timestamp,
    district: districtName,
    summary: {
      'Total Work Done': formatters.formatNumber(metrics.totalPersonDays) + ' days',
      'Families Helped': formatters.formatNumber(metrics.totalHouseholds) + ' families',
      'Money Spent': formatters.formatCurrency(metrics.totalFundsSpent),
      'Average Wage': formatters.formatCurrency(metrics.averageWage) + ' per day',
      'Work Completion': formatters.formatPercentage(metrics.completionRate),
      'Employment Generated': formatters.formatNumber(metrics.employmentGenerated) + ' jobs'
    },
    footer: 'Generated by MGNREGA Goa Dashboard - data.gov.in'
  };
};

/**
 * Export chart data for external use
 * @param {Array} chartData - Chart data points
 * @param {string} chartType - Type of chart
 * @returns {Object} Chart export data
 */
export const exportChartData = (chartData, chartType = 'trend') => {
  try {
    const exportData = {
      type: chartType,
      data: chartData.map(point => ({
        label: point.label || `${point.monthName} ${point.year}`,
        month: point.month,
        year: point.year,
        personDays: point.personDays,
        households: point.households,
        fundsSpent: point.fundsSpent,
        date: point.date?.toISOString() || null
      })),
      metadata: {
        exportedAt: new Date().toISOString(),
        recordCount: chartData.length,
        dateRange: chartData.length > 0 ? {
          start: chartData[0].date?.toISOString() || null,
          end: chartData[chartData.length - 1].date?.toISOString() || null
        } : null
      }
    };

    return { success: true, data: exportData };
  } catch (error) {
    console.error('❌ Chart data export failed:', error);
    return { success: false, error: error.message };
  }
};

/**
 * Create a shareable report URL with encoded data
 * @param {Object} reportData - Data to include in report
 * @returns {string} Shareable URL
 */
export const createShareableReport = (reportData) => {
  try {
    const compressedData = {
      d: reportData.district,
      m: reportData.metrics,
      t: Math.floor(Date.now() / 1000), // Unix timestamp
      v: '1.0' // Version
    };

    const encoded = btoa(JSON.stringify(compressedData));
    const baseUrl = window.location.origin + window.location.pathname;
    const shareUrl = `${baseUrl}?report=${encoded}`;

    return { success: true, url: shareUrl };
  } catch (error) {
    console.error('❌ Report sharing failed:', error);
    return { success: false, error: error.message };
  }
};

/**
 * Parse shared report from URL
 * @param {string} reportParam - Encoded report parameter
 * @returns {Object} Decoded report data
 */
export const parseSharedReport = (reportParam) => {
  try {
    const decoded = JSON.parse(atob(reportParam));

    return {
      success: true,
      data: {
        district: decoded.d,
        metrics: decoded.m,
        timestamp: decoded.t * 1000, // Convert back to milliseconds
        version: decoded.v
      }
    };
  } catch (error) {
    console.error('❌ Report parsing failed:', error);
    return { success: false, error: error.message };
  }
};

/**
 * Offline Storage Management
 */
export const offlineStorage = {
  /**
   * Store data for offline access
   * @param {string} key - Storage key
   * @param {any} data - Data to store
   * @param {number} expirationHours - Hours until expiration
   */
  store(key, data, expirationHours = 24) {
    try {
      const item = {
        data,
        timestamp: Date.now(),
        expiration: Date.now() + (expirationHours * 60 * 60 * 1000)
      };

      localStorage.setItem(`mgnrega-offline-${key}`, JSON.stringify(item));
      console.log(`📦 Stored offline data: ${key}`);
      return { success: true };
    } catch (error) {
      console.error('❌ Offline storage failed:', error);
      return { success: false, error: error.message };
    }
  },

  /**
   * Retrieve data from offline storage
   * @param {string} key - Storage key
   * @returns {Object} Stored data or null
   */
  retrieve(key) {
    try {
      const item = localStorage.getItem(`mgnrega-offline-${key}`);
      if (!item) return { success: false, data: null };

      const parsed = JSON.parse(item);
      const now = Date.now();

      // Check if data has expired
      if (parsed.expiration && now > parsed.expiration) {
        this.remove(key);
        return { success: false, data: null, expired: true };
      }

      console.log(`📦 Retrieved offline data: ${key}`);
      return {
        success: true,
        data: parsed.data,
        age: now - parsed.timestamp,
        cached: true
      };
    } catch (error) {
      console.error('❌ Offline retrieval failed:', error);
      return { success: false, error: error.message };
    }
  },

  /**
   * Remove data from offline storage
   * @param {string} key - Storage key
   */
  remove(key) {
    try {
      localStorage.removeItem(`mgnrega-offline-${key}`);
      console.log(`🗑️ Removed offline data: ${key}`);
      return { success: true };
    } catch (error) {
      console.error('❌ Offline removal failed:', error);
      return { success: false, error: error.message };
    }
  },

  /**
   * Clean up expired offline data
   */
  cleanup() {
    try {
      const keys = Object.keys(localStorage).filter(key =>
        key.startsWith('mgnrega-offline-')
      );

      let cleanedCount = 0;
      const now = Date.now();

      keys.forEach(key => {
        try {
          const item = JSON.parse(localStorage.getItem(key));
          if (item.expiration && now > item.expiration) {
            localStorage.removeItem(key);
            cleanedCount++;
          }
        } catch {
          // Remove corrupted items
          localStorage.removeItem(key);
          cleanedCount++;
        }
      });

      console.log(`🧹 Cleaned up ${cleanedCount} expired offline items`);
      return { success: true, cleanedCount };
    } catch (error) {
      console.error('❌ Offline cleanup failed:', error);
      return { success: false, error: error.message };
    }
  },

  /**
   * Get storage usage statistics
   */
  getStats() {
    try {
      const keys = Object.keys(localStorage).filter(key =>
        key.startsWith('mgnrega-offline-')
      );

      let totalSize = 0;
      const items = [];

      keys.forEach(key => {
        const value = localStorage.getItem(key);
        const size = new Blob([value]).size;
        totalSize += size;

        try {
          const parsed = JSON.parse(value);
          items.push({
            key: key.replace('mgnrega-offline-', ''),
            size,
            age: Date.now() - parsed.timestamp,
            expired: parsed.expiration && Date.now() > parsed.expiration
          });
        } catch {
          items.push({
            key: key.replace('mgnrega-offline-', ''),
            size,
            corrupted: true
          });
        }
      });

      return {
        success: true,
        totalItems: items.length,
        totalSize,
        items: items.sort((a, b) => (b.age || 0) - (a.age || 0))
      };
    } catch (error) {
      console.error('❌ Storage stats failed:', error);
      return { success: false, error: error.message };
    }
  }
};

/**
 * Print-friendly data formatter
 * @param {Object} dashboardData - Complete dashboard data
 * @returns {Object} Print-optimized data
 */
export const formatForPrint = (dashboardData) => {
  const { district, metrics, chartData, timestamp } = dashboardData;

  return {
    header: {
      title: 'MGNREGA Employment Report',
      subtitle: `District: ${district}`,
      generatedOn: formatters.formatDate(new Date(timestamp || Date.now())),
      logo: '🏛️'
    },
    summary: {
      'Work Generated': {
        value: formatters.formatNumber(metrics.totalPersonDays),
        unit: 'person-days',
        description: 'Total employment provided to rural families'
      },
      'Families Benefited': {
        value: formatters.formatNumber(metrics.totalHouseholds),
        unit: 'households',
        description: 'Number of families that received employment'
      },
      'Total Investment': {
        value: formatters.formatCurrency(metrics.totalFundsSpent),
        unit: '',
        description: 'Government investment in rural development'
      },
      'Program Efficiency': {
        value: formatters.formatPercentage(metrics.completionRate),
        unit: '',
        description: 'Percentage of planned work completed'
      }
    },
    trends: chartData ? chartData.slice(-6).map(point => ({
      period: `${point.monthName} ${point.year}`,
      workDays: formatters.formatNumber(point.personDays),
      families: formatters.formatNumber(point.households),
      spending: formatters.formatCurrency(point.fundsSpent)
    })) : [],
    footer: {
      dataSource: 'Ministry of Rural Development, Government of India',
      website: 'https://nrega.nic.in',
      disclaimer: 'This report is generated from publicly available government data.',
      generatedBy: 'MGNREGA Goa Dashboard'
    }
  };
};

/**
 * Performance metrics for export functionality
 */
export const exportMetrics = {
  track(action, data = {}) {
    const metrics = {
      action,
      timestamp: Date.now(),
      userAgent: navigator.userAgent,
      ...data
    };

    // Store in session storage for analytics
    try {
      const existing = JSON.parse(sessionStorage.getItem('mgnrega-export-metrics') || '[]');
      existing.push(metrics);

      // Keep only last 50 metrics
      if (existing.length > 50) {
        existing.splice(0, existing.length - 50);
      }

      sessionStorage.setItem('mgnrega-export-metrics', JSON.stringify(existing));
    } catch (error) {
      console.warn('Failed to track export metrics:', error);
    }

    console.log(`📊 Export metric tracked: ${action}`);
  },

  getMetrics() {
    try {
      return JSON.parse(sessionStorage.getItem('mgnrega-export-metrics') || '[]');
    } catch {
      return [];
    }
  },

  clearMetrics() {
    sessionStorage.removeItem('mgnrega-export-metrics');
  }
};

/**
 * Utility to copy data to clipboard
 * @param {string} text - Text to copy
 * @returns {Promise<boolean>} Success status
 */
export const copyToClipboard = async (text) => {
  try {
    if (navigator.clipboard && navigator.clipboard.writeText) {
      await navigator.clipboard.writeText(text);
      console.log('📋 Copied to clipboard');
      return true;
    } else {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = text;
      textArea.style.position = 'fixed';
      textArea.style.left = '-999999px';
      textArea.style.top = '-999999px';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();

      const successful = document.execCommand('copy');
      document.body.removeChild(textArea);

      if (successful) {
        console.log('📋 Copied to clipboard (fallback)');
        return true;
      } else {
        throw new Error('Copy command failed');
      }
    }
  } catch (error) {
    console.error('❌ Copy to clipboard failed:', error);
    return false;
  }
};

/**
 * Generate data summary for quick sharing
 * @param {Object} data - Dashboard data
 * @returns {string} Formatted summary
 */
export const generateDataSummary = (data) => {
  const { district, metrics, timestamp } = data;

  return `📊 MGNREGA ${district} Summary

🏷️ Work Generated: ${formatters.formatNumber(metrics.totalPersonDays)} person-days
👨‍👩‍👧‍👦 Families Helped: ${formatters.formatNumber(metrics.totalHouseholds)} households
💰 Investment: ${formatters.formatCurrency(metrics.totalFundsSpent)}
📈 Completion Rate: ${formatters.formatPercentage(metrics.completionRate)}

Generated on ${formatters.formatDate(new Date(timestamp || Date.now()))}
Source: MGNREGA Goa Dashboard - data.gov.in`;
};

export default {
  exportToCSV,
  exportMetricsSummary,
  exportChartData,
  createShareableReport,
  parseSharedReport,
  offlineStorage,
  formatForPrint,
  exportMetrics,
  copyToClipboard,
  generateDataSummary
};
