version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: mgnrega-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: mgnrega-goa-dashboard
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - mgnrega-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: mgnrega-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/mgnrega-goa-dashboard?authSource=admin
      DATA_GOV_IN_API_BASE_URL: https://api.data.gov.in/resource
      CACHE_EXPIRATION_HOURS: 24
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      CORS_ORIGIN: http://localhost:3000
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - mgnrega-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for additional caching (optional)
  redis:
    image: redis:7-alpine
    container_name: mgnrega-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - mgnrega-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development backend (for hot reload)
  backend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: mgnrega-backend-dev
    restart: unless-stopped
    ports:
      - "5001:5000"
    environment:
      NODE_ENV: development
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/mgnrega-goa-dashboard?authSource=admin
      DATA_GOV_IN_API_BASE_URL: https://api.data.gov.in/resource
      CACHE_EXPIRATION_HOURS: 1
      RATE_LIMIT_WINDOW_MS: 300000
      RATE_LIMIT_MAX_REQUESTS: 1000
      CORS_ORIGIN: http://localhost:3000
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
      - ./package-lock.json:/app/package-lock.json
      - /app/node_modules
    networks:
      - mgnrega-network
    profiles:
      - dev

  # MongoDB Express (Web UI for MongoDB)
  mongo-express:
    image: mongo-express:latest
    container_name: mgnrega-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - mgnrega-network
    profiles:
      - dev

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: mgnrega-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - mgnrega-network
    profiles:
      - production

volumes:
  mongodb_data:
    name: mgnrega_mongodb_data
  redis_data:
    name: mgnrega_redis_data

networks:
  mgnrega-network:
    name: mgnrega-network
    driver: bridge

# Docker Compose usage examples:
#
# Start all services (production):
#   docker-compose up -d
#
# Start development services:
#   docker-compose --profile dev up -d
#
# Start only database:
#   docker-compose up -d mongodb
#
# View logs:
#   docker-compose logs -f backend
#
# Stop all services:
#   docker-compose down
#
# Remove volumes (careful - deletes data):
#   docker-compose down -v
#
# Rebuild and start:
#   docker-compose up -d --build
